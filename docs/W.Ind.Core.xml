<?xml version="1.0"?>
<doc>
    <assembly>
        <name>W.Ind.Core</name>
    </assembly>
    <members>
        <member name="T:W.Ind.Core.Config.JwtConfig">
            <summary>
            POCO <see langword="class"/> designed to map from the JWT section of a Configuration file
            </summary>
            <remarks>
            Extend this <see langword="class"/> to map more options from your Configuration file's JWT section
            </remarks>
        </member>
        <member name="P:W.Ind.Core.Config.JwtConfig.SecretKey">
            <summary>
            JWT Key Value
            </summary>
        </member>
        <member name="P:W.Ind.Core.Config.JwtConfig.Issuer">
            <summary>
            JWT Issuer Value
            </summary>
        </member>
        <member name="P:W.Ind.Core.Config.JwtConfig.Audience">
            <summary>
            JWT Audience Value
            </summary>
        </member>
        <member name="P:W.Ind.Core.Config.JwtConfig.ValidateIssuer">
            <summary>
            JWT Validate Issuer value
            </summary>
        </member>
        <member name="P:W.Ind.Core.Config.JwtConfig.ValidateAudience">
            <summary>
            JWT Validate Audience value
            </summary>
        </member>
        <member name="P:W.Ind.Core.Config.JwtConfig.ValidateIssuerSigningKey">
            <summary>
            JWT Validate Issuer Signing Key value
            </summary>
        </member>
        <member name="T:W.Ind.Core.Config.TemporalConfig">
            <summary>
            A DTO <see langword="class"/> that holds customizaton options for temporal tables
            </summary>
        </member>
        <member name="P:W.Ind.Core.Config.TemporalConfig.HistoryTableName">
            <summary>
            Gets or sets a custom name for the history table
            </summary>
            <value>Custom name for the history table</value>
            <remarks>
            <para>The resulting table name will be appended with <c>"-History"</c>.</para>
            <para>This value will default to <c><see langword="typeof"/>(Entity).<see cref="P:System.Reflection.MemberInfo.Name">Name</see></c></para>
            </remarks>
        </member>
        <member name="P:W.Ind.Core.Config.TemporalConfig.PeriodStartName">
            <summary>
            Gets or sets a custom column name for the temporal table's period start time.
            </summary>
            <value>Custom name for temporal table's period start column.</value>
            <remarks>
            <para>Default <c>"SysStartTime"</c>.</para>
            </remarks>
        </member>
        <member name="P:W.Ind.Core.Config.TemporalConfig.PeriodEndName">
            <summary>
            Gets or sets a custom column name for the temporal table's period end time.
            </summary>
            <value>Custom name for temporal table's period end column.</value>
            <remarks>
            <para>Default: <c>"SysEndTime"</c></para>
            </remarks>
        </member>
        <member name="T:W.Ind.Core.Dto.ILoginRequest">
            <summary>
            Base DTO <see langword="interface"/> for Login Requests
            </summary>
            <remarks>
            Deriving from this <see langword="interface"/> allows you to pass more data into various Login methods
            </remarks>
        </member>
        <member name="P:W.Ind.Core.Dto.ILoginRequest.UserName">
            <summary>
            Login UserName (or email)
            </summary>
        </member>
        <member name="P:W.Ind.Core.Dto.ILoginRequest.Password">
            <summary>
            Login Password
            </summary>
        </member>
        <member name="P:W.Ind.Core.Dto.ILoginRequest.RememberMe">
            <summary>
            Determines how long until the response token expires
            </summary>
        </member>
        <member name="T:W.Ind.Core.Dto.ILoginResponse">
            <summary>
            Base DTO <see langword="interface"/> containing response data from Login
            </summary>
            <remarks>
            Deriving from this <see langword="interface"/> allows you to return more data from a Login
            </remarks>
        </member>
        <member name="P:W.Ind.Core.Dto.ILoginResponse.Token">
            <summary>
            JSON Web Token value
            </summary>
        </member>
        <member name="P:W.Ind.Core.Dto.ILoginResponse.Expires">
            <summary>
            JSON Web Token expiration date
            </summary>
        </member>
        <member name="P:W.Ind.Core.Dto.ILoginResponse.Success">
            <summary>
            Indicates whether or not the JSON Web Token was successfully generated
            </summary>
        </member>
        <member name="P:W.Ind.Core.Dto.ILoginResponse.LockedOut">
            <summary>
            Indicates whether or not the User is currently locked out
            </summary>
        </member>
        <member name="T:W.Ind.Core.Dto.IUserRegistration">
            <summary>
            Concrete DTO <see langword="interface"/> for passing data on Register
            </summary>
            <remarks>
            Derive from this <see langword="interface"/> to pass more custom data to the Register method
            </remarks>
        </member>
        <member name="P:W.Ind.Core.Dto.IUserRegistration.UserName">
            <summary>
            The desired UserName value
            </summary>
        </member>
        <member name="P:W.Ind.Core.Dto.IUserRegistration.Password">
            <summary>
            The desired Password value
            </summary>
        </member>
        <member name="P:W.Ind.Core.Dto.IUserRegistration.Email">
            <summary>
            Enterred email value
            </summary>
        </member>
        <member name="T:W.Ind.Core.Dto.LoginRequest">
            <summary>
            Concrete DTO <see langword="class"/> for Login Requests
            </summary>
            <remarks>
            Deriving from this <see langword="class"/> allows you to pass more data into various Login methods
            </remarks>
        </member>
        <member name="P:W.Ind.Core.Dto.LoginRequest.UserName">
            <summary>
            Login UserName (or email)
            </summary>
        </member>
        <member name="P:W.Ind.Core.Dto.LoginRequest.Password">
            <summary>
            Login Password
            </summary>
        </member>
        <member name="P:W.Ind.Core.Dto.LoginRequest.RememberMe">
            <summary>
            Determines how long until the response token expires
            </summary>
        </member>
        <member name="T:W.Ind.Core.Dto.LoginResponse">
            <summary>
            Concrete DTO <see langword="class"/> containing response data from Login
            </summary>
            <remarks>
            Deriving from this <see langword="class"/> allows you to return more data from a Login
            </remarks>
        </member>
        <member name="P:W.Ind.Core.Dto.LoginResponse.Token">
            <summary>
            JSON Web Token value
            </summary>
        </member>
        <member name="P:W.Ind.Core.Dto.LoginResponse.Expires">
            <summary>
            JSON Web Token expiration date
            </summary>
        </member>
        <member name="P:W.Ind.Core.Dto.LoginResponse.Success">
            <summary>
            Indicates whether or not the JSON Web Token was successfully generated
            </summary>
        </member>
        <member name="P:W.Ind.Core.Dto.LoginResponse.LockedOut">
            <summary>
            Indicates whether or not the User is currently locked out
            </summary>
        </member>
        <member name="P:W.Ind.Core.Dto.LoginResponse.NotAllowed">
            <summary>
            Indicates whether or not the User is allow to login
            </summary>
        </member>
        <member name="T:W.Ind.Core.Dto.UserRegistration">
            <summary>
            Concrete DTO <see langword="class"/> for passing data on Register
            </summary>
            <remarks>
            Derive from this <see langword="class"/> to pass more custom data to the Register method
            </remarks>
        </member>
        <member name="P:W.Ind.Core.Dto.UserRegistration.UserName">
            <summary>
            The desired UserName value
            </summary>
        </member>
        <member name="P:W.Ind.Core.Dto.UserRegistration.Password">
            <summary>
            The desired Password value
            </summary>
        </member>
        <member name="P:W.Ind.Core.Dto.UserRegistration.Email">
            <summary>
            Enterred email value
            </summary>
        </member>
        <member name="T:W.Ind.Core.Entity.base.Auditable.AuditEntityBase`1">
            <summary>
            An <see langword="abstract"/> <see langword="class"/> that both inherits from <see cref="T:W.Ind.Core.Entity.EntityBase`1"/> and implements the <see cref="T:W.Ind.Core.Entity.IAuditable"/> <see langword="interface"/>
            </summary>
            <remarks>Used to define repetitive boilerplate properties outside of the actual entity <see langword="class"/> file</remarks>
            <typeparam name="TKey">The data type of its Primary Key</typeparam>
        </member>
        <member name="P:W.Ind.Core.Entity.base.Auditable.AuditEntityBase`1.Timestamp">
            <summary>
            Derived from <see cref="T:W.Ind.Core.Entity.IAuditable"/>
            </summary>
            <remarks>
            Defined with the [<see cref="T:System.ComponentModel.DataAnnotations.TimestampAttribute"/>] so there's no need to configure for each inheritting entity
            </remarks>
        </member>
        <member name="P:W.Ind.Core.Entity.base.Auditable.AuditEntityBase`1.CreatedById">
            <summary>
            Derived from <see cref="T:W.Ind.Core.Entity.IAuditable"/>
            </summary>
            <remarks>
            Defined with the [<see cref="T:System.ComponentModel.DataAnnotations.RequiredAttribute"/>] and [<see cref="T:System.ComponentModel.DataAnnotations.Schema.ForeignKeyAttribute"/>] so there's no need to configure for each inheritting entity
            </remarks>
        </member>
        <member name="P:W.Ind.Core.Entity.base.Auditable.AuditEntityBase`1.CreatedBy">
            <summary>
            Implemented from <see cref="T:W.Ind.Core.Entity.IAuditable"/>
            </summary>
            <remarks>
            Defined with the [<see cref="T:Microsoft.EntityFrameworkCore.DeleteBehaviorAttribute"/>] so there's no need to configure for each entity AND because its Foreign Key is <see langword="required"/>
            </remarks>
        </member>
        <member name="P:W.Ind.Core.Entity.base.Auditable.AuditEntityBase`1.ModifiedById">
            <summary>
            Implemented from <see cref="T:W.Ind.Core.Entity.IAuditable"/>
            </summary>
            <remarks>
            Defined with the [<see cref="T:System.ComponentModel.DataAnnotations.Schema.ForeignKeyAttribute"/>] so there's no need to configure for each entity
            </remarks>
        </member>
        <member name="P:W.Ind.Core.Entity.base.Auditable.AuditEntityBase`1.ModifiedBy">
            <summary>
            Implemented from <see cref="T:W.Ind.Core.Entity.IAuditable"/>
            </summary>
        </member>
        <member name="P:W.Ind.Core.Entity.base.Auditable.AuditEntityBase`1.CreatedOn">
            <summary>
            Implemented from <see cref="T:W.Ind.Core.Entity.IAuditable"/>
            </summary>
        </member>
        <member name="P:W.Ind.Core.Entity.base.Auditable.AuditEntityBase`1.ModifiedOn">
            <summary>
            Implemented from <see cref="T:W.Ind.Core.Entity.IAuditable"/>
            </summary>
        </member>
        <member name="T:W.Ind.Core.Entity.AuditRoleBase`1">
            <summary>
            An <see langword="abstract"/> <see langword="class"/> that both inherits from <see cref="T:W.Ind.Core.Entity.RoleBase`1"/> and implements the <see cref="T:W.Ind.Core.Entity.IAuditable"/> <see langword="interface"/>
            </summary>
            <remarks>Used to define repetitive boilerplate properties outside of the actual entity <see langword="class"/> file</remarks>
            <typeparam name="TKey">The data type of its Primary Key</typeparam>
        </member>
        <member name="P:W.Ind.Core.Entity.AuditRoleBase`1.Timestamp">
            <summary>
            Derived from <see cref="T:W.Ind.Core.Entity.IAuditable"/>
            </summary>
            <remarks>
            Defined with the [<see cref="T:System.ComponentModel.DataAnnotations.TimestampAttribute"/>] so there's no need to configure for each inheritting entity
            </remarks>
        </member>
        <member name="P:W.Ind.Core.Entity.AuditRoleBase`1.CreatedById">
            <summary>
            Derived from <see cref="T:W.Ind.Core.Entity.IAuditable"/>
            </summary>
            <remarks>
            Defined with the [<see cref="T:System.ComponentModel.DataAnnotations.RequiredAttribute"/>] and [<see cref="T:System.ComponentModel.DataAnnotations.Schema.ForeignKeyAttribute"/>] so there's no need to configure for each inheritting entity
            </remarks>
        </member>
        <member name="P:W.Ind.Core.Entity.AuditRoleBase`1.CreatedBy">
            <summary>
            Implemented from <see cref="T:W.Ind.Core.Entity.IAuditable"/>
            </summary>
            <remarks>
            Defined with the [<see cref="T:Microsoft.EntityFrameworkCore.DeleteBehaviorAttribute"/>] so there's no need to configure for each entity AND because its Foreign Key is <see langword="required"/>
            </remarks>
        </member>
        <member name="P:W.Ind.Core.Entity.AuditRoleBase`1.ModifiedById">
            <summary>
            Implemented from <see cref="T:W.Ind.Core.Entity.IAuditable"/>
            </summary>
            <remarks>
            Defined with the [<see cref="T:System.ComponentModel.DataAnnotations.Schema.ForeignKeyAttribute"/>] so there's no need to configure for each entity
            </remarks>
        </member>
        <member name="P:W.Ind.Core.Entity.AuditRoleBase`1.ModifiedBy">
            <summary>
            Implemented from <see cref="T:W.Ind.Core.Entity.IAuditable"/>
            </summary>
        </member>
        <member name="P:W.Ind.Core.Entity.AuditRoleBase`1.CreatedOn">
            <summary>
            Implemented from <see cref="T:W.Ind.Core.Entity.IAuditable"/>
            </summary>
        </member>
        <member name="P:W.Ind.Core.Entity.AuditRoleBase`1.ModifiedOn">
            <summary>
            Implemented from <see cref="T:W.Ind.Core.Entity.IAuditable"/>
            </summary>
        </member>
        <member name="T:W.Ind.Core.Entity.AuditRoleClaimBase`1">
            <summary>
            An <see langword="abstract"/> <see langword="class"/> that both inherits from <see cref="T:Microsoft.AspNetCore.Identity.IdentityRoleClaim`1"/> and implements the <see cref="T:W.Ind.Core.Entity.IAuditable"/> <see langword="interface"/>
            </summary>
            <remarks>Used to define repetitive boilerplate properties outside of the actual entity <see langword="class"/> file</remarks>
            <typeparam name="TRoleKey">The data type of your <c>Role</c> entity's Primary Key</typeparam>
        </member>
        <member name="P:W.Ind.Core.Entity.AuditRoleClaimBase`1.Timestamp">
            <summary>
            Derived from <see cref="T:W.Ind.Core.Entity.IAuditable"/>
            </summary>
            <remarks>
            Defined with the [<see cref="T:System.ComponentModel.DataAnnotations.TimestampAttribute"/>] so there's no need to configure for each inheritting entity
            </remarks>
        </member>
        <member name="P:W.Ind.Core.Entity.AuditRoleClaimBase`1.CreatedById">
            <summary>
            Derived from <see cref="T:W.Ind.Core.Entity.IAuditable"/>
            </summary>
            <remarks>
            Defined with the [<see cref="T:System.ComponentModel.DataAnnotations.RequiredAttribute"/>] and [<see cref="T:System.ComponentModel.DataAnnotations.Schema.ForeignKeyAttribute"/>] so there's no need to configure for each inheritting entity
            </remarks>
        </member>
        <member name="P:W.Ind.Core.Entity.AuditRoleClaimBase`1.CreatedBy">
            <summary>
            Implemented from <see cref="T:W.Ind.Core.Entity.IAuditable"/>
            </summary>
            <remarks>
            Defined with the [<see cref="T:Microsoft.EntityFrameworkCore.DeleteBehaviorAttribute"/>] so there's no need to configure for each entity AND because its Foreign Key is <see langword="required"/>
            </remarks>
        </member>
        <member name="P:W.Ind.Core.Entity.AuditRoleClaimBase`1.ModifiedById">
            <summary>
            Implemented from <see cref="T:W.Ind.Core.Entity.IAuditable"/>
            </summary>
            <remarks>
            Defined with the [<see cref="T:System.ComponentModel.DataAnnotations.Schema.ForeignKeyAttribute"/>] so there's no need to configure for each entity
            </remarks>
        </member>
        <member name="P:W.Ind.Core.Entity.AuditRoleClaimBase`1.ModifiedBy">
            <summary>
            Implemented from <see cref="T:W.Ind.Core.Entity.IAuditable"/>
            </summary>
        </member>
        <member name="P:W.Ind.Core.Entity.AuditRoleClaimBase`1.CreatedOn">
            <summary>
            Implemented from <see cref="T:W.Ind.Core.Entity.IAuditable"/>
            </summary>
        </member>
        <member name="P:W.Ind.Core.Entity.AuditRoleClaimBase`1.ModifiedOn">
            <summary>
            Implemented from <see cref="T:W.Ind.Core.Entity.IAuditable"/>
            </summary>
        </member>
        <member name="T:W.Ind.Core.Entity.AuditUserBase`1">
            <summary>
            An <see langword="abstract"/> <see langword="class"/> that both inherits from <see cref="T:W.Ind.Core.Entity.UserBase`1"/> and implements the <see cref="T:W.Ind.Core.Entity.IAuditable"/> <see langword="interface"/>
            </summary>
            <remarks>Used to define repetitive boilerplate properties outside of the actual entity <see langword="class"/> file</remarks>
            <typeparam name="TKey">The data type of its Primary Key</typeparam>
        </member>
        <member name="P:W.Ind.Core.Entity.AuditUserBase`1.Timestamp">
            <summary>
            Derived from <see cref="T:W.Ind.Core.Entity.IAuditable"/>
            </summary>
            <remarks>
            Defined with the [<see cref="T:System.ComponentModel.DataAnnotations.TimestampAttribute"/>] so there's no need to configure for each inheritting entity
            </remarks>
        </member>
        <member name="P:W.Ind.Core.Entity.AuditUserBase`1.CreatedById">
            <summary>
            Derived from <see cref="T:W.Ind.Core.Entity.IAuditable"/>
            </summary>
            <remarks>
            Defined with the [<see cref="T:System.ComponentModel.DataAnnotations.RequiredAttribute"/>] and [<see cref="T:System.ComponentModel.DataAnnotations.Schema.ForeignKeyAttribute"/>] so there's no need to configure for each inheritting entity
            </remarks>
        </member>
        <member name="P:W.Ind.Core.Entity.AuditUserBase`1.CreatedBy">
            <summary>
            Implemented from <see cref="T:W.Ind.Core.Entity.IAuditable"/>
            </summary>
            <remarks>
            Defined with the [<see cref="T:Microsoft.EntityFrameworkCore.DeleteBehaviorAttribute"/>] so there's no need to configure for each entity AND because its Foreign Key is <see langword="required"/>
            </remarks>
        </member>
        <member name="P:W.Ind.Core.Entity.AuditUserBase`1.ModifiedById">
            <summary>
            Implemented from <see cref="T:W.Ind.Core.Entity.IAuditable"/>
            </summary>
            <remarks>
            Defined with the [<see cref="T:System.ComponentModel.DataAnnotations.Schema.ForeignKeyAttribute"/>] so there's no need to configure for each entity
            </remarks>
        </member>
        <member name="P:W.Ind.Core.Entity.AuditUserBase`1.ModifiedBy">
            <summary>
            Implemented from <see cref="T:W.Ind.Core.Entity.IAuditable"/>
            </summary>
        </member>
        <member name="P:W.Ind.Core.Entity.AuditUserBase`1.CreatedOn">
            <summary>
            Implemented from <see cref="T:W.Ind.Core.Entity.IAuditable"/>
            </summary>
        </member>
        <member name="P:W.Ind.Core.Entity.AuditUserBase`1.ModifiedOn">
            <summary>
            Implemented from <see cref="T:W.Ind.Core.Entity.IAuditable"/>
            </summary>
        </member>
        <member name="T:W.Ind.Core.Entity.AuditUserClaimBase`1">
            <summary>
            An <see langword="abstract"/> <see langword="class"/> that both inherits from <see cref="T:Microsoft.AspNetCore.Identity.IdentityUserClaim`1"/> and implements the <see cref="T:W.Ind.Core.Entity.IAuditable"/> <see langword="interface"/>
            </summary>
            <remarks>Used to define repetitive boilerplate properties outside of the actual entity <see langword="class"/> file</remarks>
            <typeparam name="TUserKey">The data type of your <c>User</c> entity's Primary Key</typeparam>
        </member>
        <member name="P:W.Ind.Core.Entity.AuditUserClaimBase`1.Timestamp">
            <summary>
            Derived from <see cref="T:W.Ind.Core.Entity.IAuditable"/>
            </summary>
            <remarks>
            Defined with the [<see cref="T:System.ComponentModel.DataAnnotations.TimestampAttribute"/>] so there's no need to configure for each inheritting entity
            </remarks>
        </member>
        <member name="P:W.Ind.Core.Entity.AuditUserClaimBase`1.CreatedById">
            <summary>
            Derived from <see cref="T:W.Ind.Core.Entity.IAuditable"/>
            </summary>
            <remarks>
            Defined with the [<see cref="T:System.ComponentModel.DataAnnotations.RequiredAttribute"/>] and [<see cref="T:System.ComponentModel.DataAnnotations.Schema.ForeignKeyAttribute"/>] so there's no need to configure for each inheritting entity
            </remarks>
        </member>
        <member name="P:W.Ind.Core.Entity.AuditUserClaimBase`1.CreatedBy">
            <summary>
            Implemented from <see cref="T:W.Ind.Core.Entity.IAuditable"/>
            </summary>
            <remarks>
            Defined with the [<see cref="T:Microsoft.EntityFrameworkCore.DeleteBehaviorAttribute"/>] so there's no need to configure for each entity AND because its Foreign Key is <see langword="required"/>
            </remarks>
        </member>
        <member name="P:W.Ind.Core.Entity.AuditUserClaimBase`1.ModifiedById">
            <summary>
            Implemented from <see cref="T:W.Ind.Core.Entity.IAuditable"/>
            </summary>
            <remarks>
            Defined with the [<see cref="T:System.ComponentModel.DataAnnotations.Schema.ForeignKeyAttribute"/>] so there's no need to configure for each entity
            </remarks>
        </member>
        <member name="P:W.Ind.Core.Entity.AuditUserClaimBase`1.ModifiedBy">
            <summary>
            Implemented from <see cref="T:W.Ind.Core.Entity.IAuditable"/>
            </summary>
        </member>
        <member name="P:W.Ind.Core.Entity.AuditUserClaimBase`1.CreatedOn">
            <summary>
            Implemented from <see cref="T:W.Ind.Core.Entity.IAuditable"/>
            </summary>
        </member>
        <member name="P:W.Ind.Core.Entity.AuditUserClaimBase`1.ModifiedOn">
            <summary>
            Implemented from <see cref="T:W.Ind.Core.Entity.IAuditable"/>
            </summary>
        </member>
        <member name="T:W.Ind.Core.Entity.AuditUserRoleBase`1">
            <summary>
            An <see langword="abstract"/> <see langword="class"/> that both inherits from <see cref="T:Microsoft.AspNetCore.Identity.IdentityUserRole`1"/> and implements the <see cref="T:W.Ind.Core.Entity.IAuditable"/> <see langword="interface"/>
            </summary>
            <remarks>
            <para>
            Used to define repetitive boilerplate properties outside of the actual entity <see langword="class"/> file
            </para>
            <para>
            In order to implement this, the PKs of your User and Role entities must be the same data type
            </para>
            </remarks>
            <typeparam name="TKey">The data type of your <c>User</c> and <c>Role</c> enties' Primary Key</typeparam>
        </member>
        <member name="P:W.Ind.Core.Entity.AuditUserRoleBase`1.Timestamp">
            <summary>
            Derived from <see cref="T:W.Ind.Core.Entity.IAuditable"/>
            </summary>
            <remarks>
            Defined with the [<see cref="T:System.ComponentModel.DataAnnotations.TimestampAttribute"/>] so there's no need to configure for each inheritting entity
            </remarks>
        </member>
        <member name="P:W.Ind.Core.Entity.AuditUserRoleBase`1.CreatedById">
            <summary>
            Derived from <see cref="T:W.Ind.Core.Entity.IAuditable"/>
            </summary>
            <remarks>
            Defined with the [<see cref="T:System.ComponentModel.DataAnnotations.RequiredAttribute"/>] and [<see cref="T:System.ComponentModel.DataAnnotations.Schema.ForeignKeyAttribute"/>] so there's no need to configure for each inheritting entity
            </remarks>
        </member>
        <member name="P:W.Ind.Core.Entity.AuditUserRoleBase`1.CreatedBy">
            <summary>
            Implemented from <see cref="T:W.Ind.Core.Entity.IAuditable"/>
            </summary>
            <remarks>
            Defined with the [<see cref="T:Microsoft.EntityFrameworkCore.DeleteBehaviorAttribute"/>] so there's no need to configure for each entity AND because its Foreign Key is <see langword="required"/>
            </remarks>
        </member>
        <member name="P:W.Ind.Core.Entity.AuditUserRoleBase`1.ModifiedById">
            <summary>
            Implemented from <see cref="T:W.Ind.Core.Entity.IAuditable"/>
            </summary>
            <remarks>
            Defined with the [<see cref="T:System.ComponentModel.DataAnnotations.Schema.ForeignKeyAttribute"/>] so there's no need to configure for each entity
            </remarks>
        </member>
        <member name="P:W.Ind.Core.Entity.AuditUserRoleBase`1.ModifiedBy">
            <summary>
            Implemented from <see cref="T:W.Ind.Core.Entity.IAuditable"/>
            </summary>
        </member>
        <member name="P:W.Ind.Core.Entity.AuditUserRoleBase`1.CreatedOn">
            <summary>
            Implemented from <see cref="T:W.Ind.Core.Entity.IAuditable"/>
            </summary>
        </member>
        <member name="P:W.Ind.Core.Entity.AuditUserRoleBase`1.ModifiedOn">
            <summary>
            Implemented from <see cref="T:W.Ind.Core.Entity.IAuditable"/>
            </summary>
        </member>
        <member name="T:W.Ind.Core.Entity.EntityBase`1">
            <summary>
            The base <see langword="abstract"/> <see langword="class"/> derived from <see cref="T:W.Ind.Core.Entity.IEntity`1"/> and implemented by all non-join entities
            </summary>
            <remarks>
            Defined to specify the [<see cref="T:System.ComponentModel.DataAnnotations.KeyAttribute"/>] on the <see cref="P:W.Ind.Core.Entity.EntityBase`1.Id"/> Primary Key property
            </remarks>
            <typeparam name="TKey">The data type of its Primary Key</typeparam>
        </member>
        <member name="P:W.Ind.Core.Entity.EntityBase`1.Id">
            <summary>
            Defines an implicit Primary Key that matches type <typeparamref name="TKey"/>
            </summary>
        </member>
        <member name="T:W.Ind.Core.Entity.RoleBase`1">
            <summary>
            An <see langword="abstract"/> <see langword="class"/> that inherits from <see cref="T:Microsoft.AspNetCore.Identity.IdentityRole`1"/> 
            and <see cref="T:W.Ind.Core.Entity.IEntity`1"/> in order to define its own inheritable properties and reference generically
            </summary>
            <remarks>
            Extend this <see langword="class"/> to add custom columns to your <c>Roles</c> table
            </remarks>
            <typeparam name="TKey">The data type of its Primary Key</typeparam>
        </member>
        <member name="T:W.Ind.Core.Entity.UserBase`1">
            <summary>
            An <see langword="abstract"/> <see langword="class"/> that inherits from <see cref="T:Microsoft.AspNetCore.Identity.IdentityUser`1"/> 
            and <see cref="T:W.Ind.Core.Entity.IEntity`1"/> in order to define its own inheritable properties and reference generically
            </summary>
            <remarks>
            Extend this <see langword="class"/> to add custom columns to your <c>Users</c> table
            </remarks>
            <typeparam name="TKey">The data type of its Primary Key</typeparam>
        </member>
        <member name="T:W.Ind.Core.Entity.IAuditable">
            <summary>
            A base <see langword="interface"/> that defines table columns required for audit logging
            </summary>
            <remarks>
            <para>
            Entities that implement this <see langword="interface"/> will automatically be visible to the
            <see cref="M:W.Ind.Core.Helper.ContextHelper.HandleAudit(System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry{W.Ind.Core.Entity.IAuditable}},System.Int64)"/> method on save
            </para>
            <para>
            Derive from this <see langword="interface"/> for further customization
            </para>
            </remarks>
        </member>
        <member name="P:W.Ind.Core.Entity.IAuditable.Timestamp">
            <summary>
            Audit Log Timestamp
            </summary>
            <remarks>
            <para>
            Any <see langword="class"/> implementing this should declare this a Timestamp column type via:
            </para>
            <para>
            (Preferred) Using the [<see cref="T:System.ComponentModel.DataAnnotations.TimestampAttribute"/>] on an <see langword="abstract"/> <see langword="class"/> that implements this <see langword="interface"/>, or
            </para>
            <para>
            Within your <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)"/> method for each entity individually
            </para>
            </remarks>
        </member>
        <member name="P:W.Ind.Core.Entity.IAuditable.CreatedById">
            <summary>
            The UserId (FK) of the User that created this record
            </summary>
            <remarks>
            <para>Any <see langword="class"/> implementing this should declare this a Foriegn Key column type via:</para>
            <para>
            (Preferred) Using the [<see cref="T:System.ComponentModel.DataAnnotations.Schema.ForeignKeyAttribute"/>] on an abstract class that implements this interface, or
            </para>
            <para>
            Within your <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)"/> method for each entity individually
            </para>
            </remarks>
        </member>
        <member name="P:W.Ind.Core.Entity.IAuditable.CreatedBy">
            <summary>
            The navigation property pointing to the User who created this record
            </summary>
            <remarks>
            <para>
            Nullable so you aren't required to configure <c>.Navigation().AutoInclude()</c> or <c>.DeleteBehavior(<see cref="F:Microsoft.EntityFrameworkCore.DeleteBehavior.NoAction"/>)</c>
            </para>
            <para>
            If you want it non-nullable, you must at least specify the <see cref="T:Microsoft.EntityFrameworkCore.DeleteBehavior"/> before migration
            </para>
            </remarks>
        </member>
        <member name="P:W.Ind.Core.Entity.IAuditable.CreatedOn">
            <summary>
            The <see cref="T:System.DateTime"/> value representing when this entity was initially saved
            </summary>
        </member>
        <member name="P:W.Ind.Core.Entity.IAuditable.ModifiedById">
            <summary>
            The UserId (FK) of the User that last updated this record
            </summary>
            <remarks>
            <para>Any <see langword="class"/> implementing this should declare this a Foriegn Key column type via:</para>
            <para>
            (Preferred) Using the [<see cref="T:System.ComponentModel.DataAnnotations.Schema.ForeignKeyAttribute"/>] on an abstract class that implements this interface, or
            </para>
            <para>
            Within your <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)"/> method for each entity individually
            </para>
            </remarks>
        </member>
        <member name="P:W.Ind.Core.Entity.IAuditable.ModifiedBy">
            <summary>
            The navigation property pointing to the User who last updated this record
            </summary>
            <remarks>
            <para>
            Nullable so you aren't required to configure <c>.Navigation().AutoInclude()</c> or <c>.DeleteBehavior(<see cref="F:Microsoft.EntityFrameworkCore.DeleteBehavior.NoAction"/>)</c>
            </para>
            <para>
            If you want it non-nullable, you must at least specify the <see cref="T:Microsoft.EntityFrameworkCore.DeleteBehavior"/> before migration
            </para>
            </remarks>
        </member>
        <member name="P:W.Ind.Core.Entity.IAuditable.ModifiedOn">
            <summary>
            The <see cref="T:System.DateTime"/> value representing when this entity was last updated
            </summary>
        </member>
        <member name="T:W.Ind.Core.Entity.IDate">
            <summary>
            A base <see langword="interface"/> used to identify any derived <see langword="interface"/> via Generic&lt;<see cref="T:System.Type"/>&gt; expression
            </summary>
            <remarks>
            <para>
            Derive from this <see langword="interface"/> to reference its specific <see cref="T:System.DateTime"/> properties through generic helper/service methods
            </para>
            <para>
            See <see cref="M:W.Ind.Core.Helper.UtcDateHelper.SetUtcIfDataExists``1(W.Ind.Core.Entity.IDate)"/> for an example
            </para>
            </remarks>
        </member>
        <member name="T:W.Ind.Core.Entity.IEndDate">
            <summary>
            An <see langword="interface"/> derived from <see cref="T:W.Ind.Core.Entity.IDate"/> that specifies any implementing entity will have an <see cref="P:W.Ind.Core.Entity.IEndDate.EndDate"/> property
            </summary>
            <remarks>
            <para>
            Implement this on all entities with a <c><see langword="public"/> <see cref="T:System.DateTime"/> EndDate</c> property
            </para>
            </remarks>
        </member>
        <member name="P:W.Ind.Core.Entity.IEndDate.EndDate">
            <summary>
            A <see cref="T:System.DateTime"/>? property representing an <c>EndDate</c> table column
            </summary>
            <remarks>
            <para>
            While nullable, you can still make this field required to EF via:
            </para>
            <para>
            The [<see cref="T:System.ComponentModel.DataAnnotations.RequiredAttribute"/>], or
            </para>
            <para>
            Within your <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)"/> method
            </para>
            </remarks>
        </member>
        <member name="T:W.Ind.Core.Entity.IEnterredDate">
            <summary>
            An <see langword="interface"/> derived from <see cref="T:W.Ind.Core.Entity.IDate"/> that specifies any implementing entity will have an <see cref="P:W.Ind.Core.Entity.IEnterredDate.EnterredDate"/> property
            </summary>
            <remarks>
            <para>
            Implement this on all entities with a <c><see langword="public"/> <see cref="T:System.DateTime"/> EnterredDate</c> property
            </para>
            </remarks>
        </member>
        <member name="P:W.Ind.Core.Entity.IEnterredDate.EnterredDate">
            <summary>
            A <see cref="T:System.DateTime"/>? property representing an <c>EnterredDate</c> table column
            </summary>
            <remarks>
            <para>
            While nullable, you can still make this field required to EF via:
            </para>
            <para>
            The [<see cref="T:System.ComponentModel.DataAnnotations.RequiredAttribute"/>], or
            </para>
            <para>
            Within your <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)"/> method
            </para>
            </remarks>
        </member>
        <member name="T:W.Ind.Core.Entity.IEntity`1">
            <summary>
            Base <see langword="inteface"/> implemented by non-join entity types to establish the type of its Primary Key
            </summary>
            <typeparam name="TKey">The data type of its Primary Key</typeparam>
        </member>
        <member name="P:W.Ind.Core.Entity.IEntity`1.Id">
            <summary>
            Defines an implicit Primary Key with a <see langword="type"/> that matches <typeparamref name="TKey"/>
            </summary>
        </member>
        <member name="T:W.Ind.Core.Entity.ISoftDelete">
            <summary>
            Base <see langword="interface"/> used to define a <see langword="bool"/> <see cref="P:W.Ind.Core.Entity.ISoftDelete.IsDeleted"/> column on the implementing entity
            </summary>
            <remarks>
            Handling Soft Deletes:
            <example>
            <code>
            <see langword="protected"/> <see langword="override"/> <see langword="void"/> <see cref="T:Microsoft.EntityFrameworkCore.DbContext"/>.SaveChanges() {
                <see cref="T:W.Ind.Core.Helper.ContextHelper"/>.<see cref="M:W.Ind.Core.Helper.ContextHelper.HandleSoftDelete(System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry{W.Ind.Core.Entity.ISoftDelete}})">HandleSoftDelete</see>(<see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker"/>.<see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.Entries``1">Entries</see>&lt;<see cref="T:W.Ind.Core.Entity.ISoftDelete"/>&gt;());
                
                <see langword="return"/> <see langword="base"/>.SaveChanges();
            }
            </code>
            </example>
            </remarks>
        </member>
        <member name="P:W.Ind.Core.Entity.ISoftDelete.IsDeleted">
            <summary>
            Defines a <see langword="bool"/> <c>IsDeleted</c> flag on any implementing entity/table
            </summary>
        </member>
        <member name="T:W.Ind.Core.Entity.IStartDate">
            <summary>
            An <see langword="interface"/> derived from <see cref="T:W.Ind.Core.Entity.IDate"/> that specifies any implementing entity will have an <see cref="P:W.Ind.Core.Entity.IStartDate.StartDate"/> property
            </summary>
            <remarks>
            <para>
            Implement this on all entities with a <c><see langword="public"/> <see cref="T:System.DateTime"/> StartDate</c> property
            </para>
            </remarks>
        </member>
        <member name="P:W.Ind.Core.Entity.IStartDate.StartDate">
            <summary>
            A <see cref="T:System.DateTime"/>? property representing an <c>StartDate</c> table column
            </summary>
            <remarks>
            <para>
            While nullable, you can still make this field required to EF via:
            </para>
            <para>
            The [<see cref="T:System.ComponentModel.DataAnnotations.RequiredAttribute"/>], or
            </para>
            <para>
            Within your <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)"/> method
            </para>
            </remarks>
        </member>
        <member name="T:W.Ind.Core.Entity.Role">
            <summary>
            Concrete core entity <see langword="class"/> that can be used as an <see cref="T:Microsoft.AspNetCore.Identity.IdentityRole`1"/>
            </summary>
            <remarks>
            <para>
            Inherits from <see langword="abstract"/> <see cref="T:W.Ind.Core.Entity.AuditRoleBase`1"/> which implements <see cref="T:W.Ind.Core.Entity.IAuditable"/> and <see cref="T:W.Ind.Core.Entity.IEntity`1"/>
            </para>
            <para>
            Implements <see cref="T:W.Ind.Core.Entity.ISoftDelete"/>, which is the only property defined here
            </para>
            </remarks>
        </member>
        <member name="P:W.Ind.Core.Entity.Role.IsDeleted">
            <summary>
            <para>Implemented from <see cref="T:W.Ind.Core.Entity.ISoftDelete"/></para>
            <para>Adds an <c>IsDeleted</c> flag to the <c>Role</c> table</para>
            </summary>
            <remarks>
            See <see cref="M:W.Ind.Core.Helper.ContextHelper.HandleSoftDelete(System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry{W.Ind.Core.Entity.ISoftDelete}})"/> for usage
            </remarks>
        </member>
        <member name="T:W.Ind.Core.Entity.RoleClaim">
            <summary>
            Concrete core entity <see langword="class"/> that can be used as an <see cref="T:Microsoft.AspNetCore.Identity.IdentityRoleClaim`1"/>
            </summary>
            <remarks>
            <para>
            Inherits from <see langword="abstract"/> <see cref="T:W.Ind.Core.Entity.AuditRoleClaimBase`1"/> which implements <see cref="T:W.Ind.Core.Entity.IAuditable"/>
            </para>
            <para>
            Implements <see cref="T:W.Ind.Core.Entity.ISoftDelete"/>, which is the only property defined here
            </para>
            </remarks>
        </member>
        <member name="P:W.Ind.Core.Entity.RoleClaim.IsDeleted">
            <summary>
            <para>
            Implemented from <see cref="T:W.Ind.Core.Entity.ISoftDelete"/>
            </para>
            Adds an <c>IsDeleted</c> flag to the <c>RoleClaim</c> table
            </summary>
            <remarks>
            See <see cref="M:W.Ind.Core.Helper.ContextHelper.HandleSoftDelete(System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry{W.Ind.Core.Entity.ISoftDelete}})"/> for usage
            </remarks>
        </member>
        <member name="T:W.Ind.Core.Entity.User">
            <summary>
            Concrete core entity <see langword="class"/> that can be used as an <see cref="T:Microsoft.AspNetCore.Identity.IdentityUser`1"/>
            </summary>
            <remarks>
            <para>
            Inherits from <see langword="abstract"/> <see cref="T:W.Ind.Core.Entity.AuditUserBase`1"/> which implements <see cref="T:W.Ind.Core.Entity.IAuditable"/> and <see cref="T:W.Ind.Core.Entity.IEntity`1"/>
            </para>
            <para>
            Implements <see cref="T:W.Ind.Core.Entity.ISoftDelete"/>, which is the only property defined here
            </para>
            </remarks>
        </member>
        <member name="M:W.Ind.Core.Entity.User.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="P:W.Ind.Core.Entity.User.IsDeleted">
            <summary>
            <para>Implemented from <see cref="T:W.Ind.Core.Entity.ISoftDelete"/></para>
            <para>Adds an <c>IsDeleted</c> flag to the <c>User</c> table</para>
            </summary>
            <remarks>
            See <see cref="M:W.Ind.Core.Helper.ContextHelper.HandleSoftDelete(System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry{W.Ind.Core.Entity.ISoftDelete}})"/> for usage
            </remarks>
        </member>
        <member name="T:W.Ind.Core.Entity.UserClaim">
            <summary>
            Concrete core entity <see langword="class"/> that can be used as an <see cref="T:Microsoft.AspNetCore.Identity.IdentityUserClaim`1"/>
            </summary>
            <remarks>
            <para>
            Inherits from <see langword="abstract"/> <see cref="T:W.Ind.Core.Entity.AuditUserClaimBase`1"/> which implements <see cref="T:W.Ind.Core.Entity.IAuditable"/>
            </para>
            <para>
            Implements <see cref="T:W.Ind.Core.Entity.ISoftDelete"/>, which is the only property defined here
            </para>
            </remarks>
        </member>
        <member name="P:W.Ind.Core.Entity.UserClaim.IsDeleted">
            <summary>
            <para>
            Implemented from <see cref="T:W.Ind.Core.Entity.ISoftDelete"/>
            </para>
            Adds an <c>IsDeleted</c> flag to the <c>UserClaim</c> table
            </summary>
            <remarks>
            See <see cref="M:W.Ind.Core.Helper.ContextHelper.HandleSoftDelete(System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry{W.Ind.Core.Entity.ISoftDelete}})"/> for usage
            </remarks>
        </member>
        <member name="T:W.Ind.Core.Entity.UserLogin">
            <summary>
            Core entity <see langword="type"/> that can be used as an <see cref="T:Microsoft.AspNetCore.Identity.IdentityUserLogin`1"/>
            </summary>
            <remarks>
            <para>
            Implements <see cref="T:W.Ind.Core.Entity.ISoftDelete"/>, which is the only property defined here
            </para>
            </remarks>
        </member>
        <member name="P:W.Ind.Core.Entity.UserLogin.IsDeleted">
            <summary>
            <para>
            Implemented from <see cref="T:W.Ind.Core.Entity.ISoftDelete"/>
            </para>
            Adds an <c>IsDeleted</c> flag to the <c>UserLogin</c> table
            </summary>
            <remarks>
            See <see cref="M:W.Ind.Core.Helper.ContextHelper.HandleSoftDelete(System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry{W.Ind.Core.Entity.ISoftDelete}})"/> for usage
            </remarks>
        </member>
        <member name="T:W.Ind.Core.Entity.UserRole">
            <summary>
            Concrete core entity <see langword="class"/> that can be used as an <see cref="T:Microsoft.AspNetCore.Identity.IdentityUserLogin`1"/>
            </summary>
            <remarks>
            <para>
            Inherits from <see langword="abstract"/> <see cref="T:W.Ind.Core.Entity.AuditUserRoleBase`1"/> which implements <see cref="T:W.Ind.Core.Entity.IAuditable"/>
            </para>
            <para>
            Implements <see cref="T:W.Ind.Core.Entity.ISoftDelete"/>, which is the only property defined here
            </para>
            </remarks>
        </member>
        <member name="P:W.Ind.Core.Entity.UserRole.IsDeleted">
            <summary>
            <para>
            Implemented from <see cref="T:W.Ind.Core.Entity.ISoftDelete"/>
            </para>
            Adds an <c>IsDeleted</c> flag to the <c>UserRole</c> table
            </summary>
            <remarks>
            See <see cref="M:W.Ind.Core.Helper.ContextHelper.HandleSoftDelete(System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry{W.Ind.Core.Entity.ISoftDelete}})"/> for usage
            </remarks>
        </member>
        <member name="T:W.Ind.Core.Entity.UserToken">
            <summary>
            Concrete core entity <see langword="class"/> that can be used as an <see cref="T:Microsoft.AspNetCore.Identity.IdentityUserToken`1"/>
            </summary>
            <remarks>
            <para>
            Implements <see cref="T:W.Ind.Core.Entity.ISoftDelete"/>, which is the only property defined here
            </para>
            </remarks>
        </member>
        <member name="P:W.Ind.Core.Entity.UserToken.IsDeleted">
            <summary>
            <para>
            Implemented from <see cref="T:W.Ind.Core.Entity.ISoftDelete"/>
            </para>
            Adds an <c>IsDeleted</c> flag to the <c>UserToken</c> table
            </summary>
            <remarks>
            See <see cref="M:W.Ind.Core.Helper.ContextHelper.HandleSoftDelete(System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry{W.Ind.Core.Entity.ISoftDelete}})"/> for usage
            </remarks>
        </member>
        <member name="T:W.Ind.Core.Helper.ContextHelper">
            <summary>
            This <see langword="static"/> helper class contains useful methods for defining a <see cref="T:Microsoft.EntityFrameworkCore.DbContext"/>.
            </summary>
        </member>
        <member name="M:W.Ind.Core.Helper.ContextHelper.BuildTemporal``1(Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder{``0})">
            <summary>
            A <see langword="static"/> method that configures a temporal table based off generic type <typeparamref name="TEntity"/>.
            </summary>
            <remarks>
            <example>
            Usage:
            <code>
            <see langword="protected"/> <see langword="override"/> <see langword="void"/> onModelCreating(<see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder"/> builder) {
                builder.<see cref="M:Microsoft.EntityFrameworkCore.ModelBuilder.Entity``1">Entity</see>&lt;<typeparamref name="TEntity"/>&gt;()
                    .<see cref="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder{``0}})">ToTable</see>(<see cref="T:W.Ind.Core.Helper.ContextHelper"/>.<see cref="M:W.Ind.Core.Helper.ContextHelper.BuildTemporal``1(Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder{``0})">BuildTemporal</see>)
            }
            </code>
            </example>
            </remarks>
            <typeparam name="TEntity">The entity type to build the Temporal table from.</typeparam>
            <param name="builder">TableBuilder instance exposed through the EF Core ModelBuilder</param>
        </member>
        <member name="M:W.Ind.Core.Helper.ContextHelper.BuildTemporal``1(Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder{``0},W.Ind.Core.Config.TemporalConfig)">
            <summary>
            A <see langword="static"/> method that configures a temporal table based off generic type <typeparamref name="TEntity"/>.
            </summary>
            <remarks>
            <para>
            The resulting temporal table will have a custom name defined with <paramref name="config"/>.<see cref="P:W.Ind.Core.Config.TemporalConfig.HistoryTableName">HistoryTableName</see>
            </para>
            <example>
            Usage:
            <code>
            <see langword="protected"/> <see langword="override"/> <see langword="void"/> <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)">onModelCreating</see>(<see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder"/> builder) {
                builder<see cref="M:Microsoft.EntityFrameworkCore.ModelBuilder.Entity``1">.Entity</see>&lt;<typeparamref name="TEntity"/>&gt;()
                    .<see cref="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder{``0}})">ToTable</see>(<see cref="T:Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder"/> builder =>
                        <see cref="T:W.Ind.Core.Helper.ContextHelper"/>.<see cref="M:W.Ind.Core.Helper.ContextHelper.BuildTemporal``1(Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder{``0},W.Ind.Core.Config.TemporalConfig)">BuildTemporal</see>(builder, "CustomHistoryTableName");
                    );
            }
            </code>
            </example>
            </remarks>
            <typeparam name="TEntity">Any entity with a corresponding SQL table.</typeparam>
            <param name="builder"><see cref="T:Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder"/> instance, accessable through the <see cref="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder{``0}})">ToTable</see>() method in <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)"/> "OnModelCreating"</param>
            <param name="config">Configuration options to customize this temporal table</param>
        </member>
        <member name="M:W.Ind.Core.Helper.ContextHelper.HandleSoftDelete(System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry{W.Ind.Core.Entity.ISoftDelete}})">
            <summary>
            A <see langword="static"/> method that handles when an Entity (that's derived from <see cref="T:W.Ind.Core.Entity.ISoftDelete"/>) is deleted.
            </summary>
            <remarks>
            <para>
            Resets <see cref="T:Microsoft.EntityFrameworkCore.EntityState"/> to <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Modified"/> and sets the <see cref="P:W.Ind.Core.Entity.ISoftDelete.IsDeleted"/> flag to <see langword="true"/>.
            </para>
            <example>
            Usage:
            <code>
            <see langword="protected"/> <see langword="override"/> <see langword="int"/> <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges">SaveChanges</see>() {
                <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker"/>.<see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.Entries``1">Entries</see>&lt;<see cref="T:W.Ind.Core.Entity.ISoftDelete"/>&gt;()
                    .<see cref="M:W.Ind.Core.Helper.ContextHelper.HandleSoftDelete(System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry{W.Ind.Core.Entity.ISoftDelete}})">HandleSoftDelete</see>();
            }
            </code>
            </example>
            </remarks>
            <param name="entries"><see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.Entries``1" /></param>
        </member>
        <member name="M:W.Ind.Core.Helper.ContextHelper.HandleAudit(System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry{W.Ind.Core.Entity.IAuditable}},System.Int64)">
            <summary>
            A <see langword="static"/> method used to update the audit log fields provided by <see cref="T:W.Ind.Core.Entity.IAuditable"/>.
            </summary>
            <remarks>
            <para>
            Call <c><see cref="M:W.Ind.Core.Service.UserService`2.GetCurrent"/></c> to retrieve the current user's ID.
            </para>
            <example>
            Usage:
            <code>
            <see langword="protected"/> <see langword="override"/> <see langword="int"/> <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges">SaveChanges</see>() {
                <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker"/>.<see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.Entries``1">Entries</see>&lt;<see cref="T:W.Ind.Core.Entity.IAuditable"/>&gt;()
                    .<see cref="M:W.Ind.Core.Helper.ContextHelper.HandleAudit(System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry{W.Ind.Core.Entity.IAuditable}},System.Int64)">HandleAudit</see>(<see cref="M:W.Ind.Core.Service.UserService`2.GetCurrent"/>);
            }
            </code>
            </example>
            </remarks>
            <param name="entries"><see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.Entries``1"/></param>
            <param name="currentUser"><see cref="M:W.Ind.Core.Service.UserService`2.GetCurrent"/></param>
        </member>
        <member name="M:W.Ind.Core.Helper.ContextHelper.ParseUtcDates(System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry{W.Ind.Core.Entity.IDate}})">
            <summary>
            A <see langword="static"/> method used to parse an entity's <see cref="T:System.DateTime"/> properties to UTC.
            </summary>
            <remarks>
            <para>Useful when <see langword="override">overriding</see> <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges"/></para>
            <example>
            Usage:
            <code>
            <see langword="protected"/> <see langword="override"/> <see langword="int"/> <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges">SaveChanges</see>() {
                <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker"/>.<see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.Entries``1">Entries</see>&lt;<see cref="T:W.Ind.Core.Entity.IDate"/>&gt;.<see cref="M:W.Ind.Core.Helper.ContextHelper.ParseUtcDates(System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry{W.Ind.Core.Entity.IDate}})">ParseUtcDates</see>();
            }
            </code>
            </example>
            </remarks>
            <param name="entries">"<see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.Entries``1"/></param>
        </member>
        <member name="M:W.Ind.Core.Helper.ContextHelper.GetFromJsonFile``1(System.String)">
            <summary>
            A <see langword="static"/> method that reads, dererializes, and returns data from JSON files.
            </summary>
            <remarks>
            <para>The file path is relative to the startup project directory while referenced inside <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)"/>.</para>
            <para>Useful for seeding data.</para>
            <example>
            Usage:
            <code>
            <see langword="protected"/> <see langword="override"/> <see langword="void"/> <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)">OnModelCreating</see>(<see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder"/> builder) {
                builder.<see cref="M:Microsoft.EntityFrameworkCore.ModelBuilder.Entity``1">Entity</see>&lt;<typeparamref name="TEntity"/>&gt;()
                    .<see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.HasData(System.Collections.Generic.IEnumerable{System.Object})">HasData</see>(<see cref="T:W.Ind.Core.Helper.ContextHelper"/>.<see cref="M:W.Ind.Core.Helper.ContextHelper.GetFromJsonFile``1(System.String)">GetFromJsonFile</see>(<c>"seed/data.json"</c>));
            }
            </code>
            </example>
            </remarks>
            <typeparam name="TEntity">The resulting data type of the deserialized JSON</typeparam>
            <param name="filePath">Path is relative to startup project when called in your DbContext's "OnModelCreating" method</param>
            <returns>The JSON data deserialized as an instance of <typeparamref name="TEntity"/></returns>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="filePath"/> is empty or contains any restricted characters</exception>
            <exception cref="T:System.NullReferenceException">Thrown when the deserialized <typeparamref name="TEntity"/> is <see langword="null"/></exception>
            <exception cref="T:System.IO.PathTooLongException">Thrown when <paramref name="filePath"/> is longer than 260 characters</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">Thrown when <paramref name="filePath"/> points to any non-existent directory</exception>
            <exception cref="T:System.UnauthorizedAccessException">Thrown when method caller doesn't have read permissions for the specified file</exception>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:W.Ind.Core.Helper.ContextHelper.ParsePrimaryKey``1(System.String)">
            <summary>
            Used to parse an entity's Primary Key from a <see langword="string"/> to an instance of <typeparamref name="TKey"/>
            </summary>
            <remarks>
            Useful for parsing keys retrieved from <see cref="T:Microsoft.AspNetCore.Http.HttpContext"/>
            </remarks>
            <typeparam name="TKey">The data type this key should be parsed into</typeparam>
            <param name="key"><see langword="string"/> instance of a Primary Key value</param>
            <returns></returns>
            <exception cref="T:System.FormatException">Thrown when the Primary Key <see langword="type"/> is neither Integer based, nor <see langword="string"/>/<see cref="T:System.Guid"/></exception>
        </member>
        <member name="T:W.Ind.Core.Helper.GenericTypeHelper">
            <summary>
            This <see langword="static"/> helper <see langword="class"/> is used to help identify generic types
            </summary>
        </member>
        <member name="M:W.Ind.Core.Helper.GenericTypeHelper.IsIntegerType``1">
            <summary>
            Determines if <see langword="typeof"/>(<typeparamref name="T"/>) is integer based
            </summary>
            <remarks>Meaning that it can only ever be a whole number value</remarks>
            <typeparam name="T">The generic <see langword="type"/> to check against</typeparam>
            <returns>
            <para><see langword="true"/>, if <typeparamref name="T"/> is integer based</para>
            <para><see langword="false"/>, if <typeparamref name="T"/> is not integer based</para>
            </returns>
        </member>
        <member name="M:W.Ind.Core.Helper.GenericTypeHelper.IsIntegerType(System.Type)">
            <summary>
            Determines if <paramref name="type"/> is integer based
            </summary>
            <remarks>Meaning that it can only ever be a whole number value</remarks>
            <returns>
            <para><see langword="true"/>, if <paramref name="type"/> is integer based</para>
            <para><see langword="false"/>, if <paramref name="type"/> is not integer based</para>
            </returns>
        </member>
        <member name="T:W.Ind.Core.Helper.TokenHelper">
            <summary>
            This <see langword="static"/> helper class contains methods useful for JWT Validation
            </summary>
        </member>
        <member name="M:W.Ind.Core.Helper.TokenHelper.GetInvalidatedTimeSpan(System.String)">
            <summary>
            Gets the <see href="TimeSpan"/> from now until the <paramref name="token"/> expires
            </summary>
            <remarks>
            <para>Useful for invalidating JWT in-memory until it naturally expires</para>
            </remarks>
            <param name="token"><see langword="string"/> JSON Web Token</param>
            <returns>The <see cref="T:System.TimeSpan"/> representing how long until this <paramref name="token"/> naturally expires</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when <paramref name="token"/> is unreadable</exception>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="token" /> is too long</exception>
        </member>
        <member name="M:W.Ind.Core.Helper.TokenHelper.GetTokenExpiration(System.String)">
            <summary>
            Get the current Expiration Date of a JSON Web Token (if readable)
            </summary>
            <param name="token">JSON Web Token</param>
            <returns>The expiration date of <paramref name="token"/></returns>
            <exception cref="T:System.InvalidOperationException">Thrown when <paramref name="token"/> is unreadable</exception>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="token" /> is too long</exception>
        </member>
        <member name="T:W.Ind.Core.Helper.UtcDateHelper">
            <summary>
            This <see langword="static"/> helper class is used to identify and parse an entity's <see cref="T:System.DateTime"/> properties to UTC
            </summary>
            <remarks>
            Use with <see cref="T:W.Ind.Core.Entity.IDate"/> and any of it's deriving <see langword="interface"/> to specify which <see cref="T:System.DateTime"/> properties to parse
            </remarks>
        </member>
        <member name="M:W.Ind.Core.Helper.UtcDateHelper.SetUtcIfDataExists``1(W.Ind.Core.Entity.IDate)">
            <summary>
            Uses any <see langword="interface"/> derived from <see cref="T:W.Ind.Core.Entity.IDate"/> to parse it's <see cref="T:System.DateTime"/> properties to UTC
            </summary>
            <remarks>
            <para>
            Cast your entity into an <see cref="T:W.Ind.Core.Entity.IDate"/> with the <see langword="as"/> keyword if it derives from any <typeparamref name="TType"/> <see langword="interface"/>
            </para>
            <para>
            See <see cref="M:W.Ind.Core.Helper.ContextHelper.ParseUtcDates(System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry{W.Ind.Core.Entity.IDate}})"/> implementation for usage
            </para>
            <para>
            Loops through all <see cref="T:System.DateTime"/> properties defined in <typeparamref name="TType"/>
            </para>
            </remarks>
            <typeparam name="TType">Any <see langword="interface"/> type that derives from <see cref="T:W.Ind.Core.Entity.IDate"/>.</typeparam>
            <param name="entity">Can cast any entity (using the 'as' keyword) that implements "IDate". Or an interface derived from "IDate".</param>
        </member>
        <member name="T:W.Ind.Core.Middleware.JwtBase`1">
            <summary>
            An extensible <see langword="abstract"/> base middleware <see langword="class"/> for handling JWT
            </summary>
            <remarks>
            Implementation:
            <example>
            <code>
            <see langword="public"/> <see langword="async"/> <see cref="T:System.Threading.Tasks.Task"/> InvokeAsync(<see cref="T:Microsoft.AspNetCore.Http.HttpContext"/> context) {
                <see langword="if"/> (<see langword="await"/> <see cref="M:W.Ind.Core.Middleware.JwtBase`1.ShouldSkip(Microsoft.AspNetCore.Http.HttpContext)"/>) 
                {
                    <see cref="F:W.Ind.Core.Middleware.JwtBase`1._next"/>(<see cref="T:Microsoft.AspNetCore.Http.HttpContext"/> context);
                    <see langword="return"/>;
                }
                
                <see langword="await"/> <see cref="!:ProcessToken(HttpContext)">ProcessToken</see>(context);
                <see langword="return"/>;
            }
            </code>
            </example>
            </remarks>
        </member>
        <member name="F:W.Ind.Core.Middleware.JwtBase`1._jwtConfig">
            <summary>
            Preferably injected JWT Configuration options
            </summary>
        </member>
        <member name="F:W.Ind.Core.Middleware.JwtBase`1._next">
            <summary>
            Middleware specific <see cref="T:Microsoft.AspNetCore.Http.RequestDelegate"/>
            </summary>
        </member>
        <member name="F:W.Ind.Core.Middleware.JwtBase`1._jwtInvalidator">
            <summary>
            Injected instance of <see cref="T:W.Ind.Core.Service.IJwtInvalidator"/> singleton service
            </summary>
        </member>
        <member name="M:W.Ind.Core.Middleware.JwtBase`1.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,`0,W.Ind.Core.Service.IJwtInvalidator)">
            <summary>
            Constructor with injected service args
            </summary>
            <param name="next">Middleware specific <see cref="T:Microsoft.AspNetCore.Http.RequestDelegate"/></param>
            <param name="jwtConfig">Preferably inject JWT Configuration options</param>
            <param name="jwtInvalidator">Injected instance of <see cref="T:W.Ind.Core.Service.IJwtInvalidator"/> singleton service</param>
        </member>
        <member name="M:W.Ind.Core.Middleware.JwtBase`1.ShouldSkip(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Checks via <paramref name="context"/> if the current route should be skipped from token processing
            </summary>
            <remarks>
            You must implement this method on your inheritting middleware <see langword="class"/>
            </remarks>
            <param name="context">The current <see cref="T:Microsoft.AspNetCore.Http.HttpContext"/> instance</param>
            <returns>
            <para><see langword="true"/>, if token processing can be skipped</para>
            <para><see langword="false"/>, if token processing cannot be skipped</para>
            </returns>
            <exception cref="T:System.NotImplementedException">You must <see langword="override"/> this method to use it</exception>
        </member>
        <member name="M:W.Ind.Core.Middleware.JwtBase`1.GenerateToken(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})">
            <summary>
            Generates a new <see langword="string"/> JSON Web Token from the given User <paramref name="claims"/>
            </summary>
            <param name="claims"></param>
            <returns></returns>
        </member>
        <member name="M:W.Ind.Core.Middleware.JwtBase`1.GetPrincipalFromExpiredToken(System.String)">
            <summary>
            Returns a <see cref="T:System.Security.Claims.ClaimsPrincipal"/> instance retreived from <paramref name="token"/> (even when expired)
            </summary>
            <param name="token"><see langword="string"/> JSON Web Token</param>
            <returns><see cref="T:System.Security.Claims.ClaimsPrincipal"/> from passed <paramref name="token"/></returns>
            <exception cref="T:Microsoft.IdentityModel.Tokens.SecurityTokenException">Thrown when the validated <see cref="T:Microsoft.IdentityModel.Tokens.SecurityToken"/> is <see langword="null"/> or invalid</exception>
        </member>
        <member name="M:W.Ind.Core.Middleware.JwtBase`1.ProcessTokenAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            An <see langword="async"/> method that checks the current JWT value's validity in the given <paramref name="context"/>
            </summary>
            <remarks>
            <para>Sets the response <c>"Authorization"</c> header to new token value if successful</para>
            </remarks>
            <param name="context">The current <see cref="T:Microsoft.AspNetCore.Http.HttpContext"/> instance</param>
            <returns>Treat as <see langword="void"/></returns>
        </member>
        <member name="M:W.Ind.Core.Middleware.JwtBase`1.GetToken(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Retreive the <see langword="string"/> JSON Web Token from <paramref name="context"/>
            </summary>
            <param name="context">The current <see cref="T:Microsoft.AspNetCore.Http.HttpContext"/></param>
            <returns><see langword="string"/> JSON Web Token value (if present)</returns>
        </member>
        <member name="M:W.Ind.Core.Middleware.JwtBase`1.SetToken(Microsoft.AspNetCore.Http.HttpContext,System.String)">
            <summary>
            Resets the <c>"Authorization"</c> response header to use <paramref name="token"/>
            </summary>
            <param name="context">The current <see cref="T:Microsoft.AspNetCore.Http.HttpContext"/></param>
            <param name="token"><see langword="string"/> JSON Web Token</param>
        </member>
        <member name="T:W.Ind.Core.Service.JwtServiceBase`2">
            <summary>
            <see langword="abstract"/> <see langword="class"/> implemented by <see cref="T:W.Ind.Core.Service.JwtService`2"/>
            </summary>
            <remarks>
            <para>Contains <see langword="protected"/> instance methods that can be invoked in any derived <see langword="class"/></para>
            <para>Built for extensibility</para>
            </remarks>
            <typeparam name="TUser">
            <para>The CLR <see langword="type"/> corresponding to your User entity/table</para> 
            <para>Ensure this <see langword="type"/> derives from <see cref="T:W.Ind.Core.Entity.UserBase`1"/></para>
            </typeparam>
            <typeparam name="TKey">
            The data type of <typeparamref name="TUser"/>'s Primary Key
            </typeparam>
        </member>
        <member name="F:W.Ind.Core.Service.JwtServiceBase`2._config">
            <summary>
            Options for JWT mapped directly from the application's Configuration file
            </summary>
        </member>
        <member name="M:W.Ind.Core.Service.JwtServiceBase`2.#ctor(W.Ind.Core.Config.JwtConfig)">
            <summary>
            Base constructor
            </summary>
            <param name="config">Mappped from Configuration and injected</param>
        </member>
        <member name="M:W.Ind.Core.Service.JwtServiceBase`2.ConfigureToken(`0,System.DateTime)">
            <summary>
            Configures and returns a new JSON Web Token
            </summary>
            <remarks>
            <para>
            To get the JSON Web Token as a <see langword="string"/>:
            </para>
            <para>
            Pass the returned <see cref="T:System.IdentityModel.Tokens.Jwt.JwtSecurityToken"/> instance into <see cref="M:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.WriteToken(Microsoft.IdentityModel.Tokens.SecurityToken)"/> as it's param
            </para>
            </remarks>
            <param name="user">
            <para>The CLR <see langword="type"/> corresponding to your User entity/table</para> 
            <para>Ensure this <see langword="type"/> derives from <see cref="T:W.Ind.Core.Entity.UserBase`1"/></para>
            </param>
            <param name="expires">The expiration date to set</param>
            <returns>An instance of <see cref="T:System.IdentityModel.Tokens.Jwt.JwtSecurityToken"/></returns>
        </member>
        <member name="M:W.Ind.Core.Service.JwtServiceBase`2.GetUserClaims(`0)">
            <summary>
            Gets the passed <typeparamref name="TUser"/>'s <see cref="T:System.Security.Claims.Claim"/>s in order to configure a JSON Web token
            </summary>
            <remarks>
            Override this method to get more claims added to your JSON Web Token
            </remarks>
            <param name="user">
            <para>The CLR <see langword="type"/> corresponding to your User entity/table</para> 
            <para>Ensure this <see langword="type"/> derives from <see cref="T:W.Ind.Core.Entity.UserBase`1"/></para>
            </param>
            <returns>An <see cref="T:System.Array"/> of the <paramref name="user"/>'s <see cref="T:System.Security.Claims.Claim"/>s</returns>
            <exception cref="T:System.NullReferenceException">Thrown when either <paramref name="user"/> or <c>user.Id</c> is <see langword="null"/></exception>
        </member>
        <member name="T:W.Ind.Core.Service.UserServiceBase`2">
            <summary>
            An <see langword="abstract"/> <see langword="class"/> implemented by <see cref="T:W.Ind.Core.Service.UserService`2"/>
            </summary>
            <remarks>
            <para>Handles <see cref="T:Microsoft.AspNetCore.Identity.UserManager`1"/> related tasks using <see cref="N:Microsoft.AspNetCore.Identity"/></para>
            </remarks>
            <typeparam name="TUser">
            <para>The CLR <see langword="type"/> corresponding to your User entity/table</para> 
            <para>Ensure this <see langword="type"/> derives from <see cref="T:W.Ind.Core.Entity.UserBase`1"/></para>
            </typeparam>
            <typeparam name="TKey">
            The data type of <typeparamref name="TUser"/>'s Primary Key
            </typeparam>
        </member>
        <member name="F:W.Ind.Core.Service.UserServiceBase`2._userManager">
            <summary>
            A <see langword="protected"/> <see langword="readonly"/> field used to access <see cref="T:Microsoft.AspNetCore.Identity.UserManager`1"/> within derived <see langword="class"/> implementation
            </summary>
        </member>
        <member name="F:W.Ind.Core.Service.UserServiceBase`2._signInManager">
            <summary>
            A <see langword="protected"/> <see langword="readonly"/> field used to access <see cref="T:Microsoft.AspNetCore.Identity.SignInManager`1"/> within derived <see langword="class"/> implementation
            </summary>
        </member>
        <member name="F:W.Ind.Core.Service.UserServiceBase`2._jwtService">
            <summary>
            A <see langword="protected"/> <see langword="readonly"/> field used to access <see cref="T:W.Ind.Core.Service.IJwtService`2"/> within derived <see langword="class"/> implementation
            </summary>
        </member>
        <member name="M:W.Ind.Core.Service.UserServiceBase`2.#ctor(Microsoft.AspNetCore.Identity.UserManager{`0},Microsoft.AspNetCore.Identity.SignInManager{`0},W.Ind.Core.Service.IJwtService{`0,`1})">
            <summary>
            Base Constructor
            Base constructor for the "UserService" class that takes injected service dependencies.
            </summary>
            <remarks>
            Args are meant to be injected service dependencies
            </remarks>
            <param name="userManager">
            <para>Inject while configuring services in your <c>Program.cs</c> or <c>Startup.cs</c> file:</para>
            <example>
            <code>
            <see langword="using"/> <see cref="N:Microsoft.Extensions.DependencyInjection"/>;
            
            builder.Services.AddIdentity&lt;<see cref="T:W.Ind.Core.Entity.User"/>, <see cref="T:W.Ind.Core.Entity.Role"/>&gt;(...);
            </code>
            </example>
            </param>
            <param name="jwtService">Injected instance of <see cref="T:W.Ind.Core.Service.IJwtService`2"/> singleton</param>
            <param name="signInManager">
            <para>Inject while configuring services in your <c>Program.cs</c> or <c>Startup.cs</c> file:</para>
            <example>
            <code>
            <see langword="using"/> <see cref="N:Microsoft.Extensions.DependencyInjection"/>;
            
            builder.Services.AddIdentity&lt;<see cref="T:W.Ind.Core.Entity.User"/>, <see cref="T:W.Ind.Core.Entity.Role"/>&gt;(...);
            </code>
            </example>
            </param>
        </member>
        <member name="M:W.Ind.Core.Service.UserServiceBase`2.EnsureUniqueEmailAsync(System.String)">
            <summary>
            An <see langword="async"/> method to validate if <paramref name="email"/> is unique to the system
            </summary>
            <remarks>
            Will <see langword="throw"/> <see cref="T:System.ComponentModel.DataAnnotations.ValidationException"/> or <see cref="T:System.ArgumentNullException"/> on fail
            </remarks>
            <param name="email">The email value to validate</param>
            <returns>Treat as <see langword="void"/></returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="email"/> is <see langword="null"/></exception>
            <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">Thrown when <paramref name="email"/> is in use</exception>
        </member>
        <member name="M:W.Ind.Core.Service.UserServiceBase`2.EnsureUniqueNameAsync(System.String)">
            <summary>
            An <see langword="async"/> method to validate if <paramref name="name"/> is unique to the system
            </summary>
            <remarks>
            Will <see langword="throw"/> <see cref="T:System.ComponentModel.DataAnnotations.ValidationException"/> on fail
            </remarks>
            <param name="name">The UserName value to validate</param>
            <returns>Treat as <see langword="void"/></returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="name"/> is <see langword="null"/></exception>
            <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">Thrown when <paramref name="name"/> is in use</exception>
        </member>
        <member name="M:W.Ind.Core.Service.UserServiceBase`2.RegisterAsync``1(``0)">
            <summary>
            An <see langword="async"/> method that adds a new <typeparamref name="TUser"/> to the System
            </summary>
            <typeparam name="TUserRegistration">
            <para>Any concrete <see langword="class"/> derived from <see cref="T:W.Ind.Core.Dto.IUserRegistration"/> to use as the <paramref name="dto"/> parameter</para>
            </typeparam>
            <param name="dto">
            <para>An instance of any concrete <see langword="class"/> derived from <see cref="T:W.Ind.Core.Dto.IUserRegistration"/></para>
            <para>Matches generic type <typeparamref name="TUserRegistration"/></para>
            </param>
            <returns>An insance of <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult"/> from the <see cref="M:Microsoft.AspNetCore.Identity.UserManager`1.CreateAsync(`0,System.String)"/> method</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when either the Email or Password is <see langword="null"/></exception>
            <exception cref="T:System.ObjectDisposedException">Thrown when the <see cref="F:W.Ind.Core.Service.UserServiceBase`2._userManager"/> has already been disposed</exception>
            <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">Thrown when either the Email or UserName is taken</exception>
        </member>
        <member name="M:W.Ind.Core.Service.UserServiceBase`2.ValidateLoginAsync``2(``0)">
            <summary>
            An <see langword="async"/> method that validates a <typeparamref name="TLoginRequest"/>
            </summary>
            <remarks>
            Will check the number of consecutive failed login attempts and lockout the user after the 7th failed attempt
            </remarks>
            <typeparam name="TLoginRequest">Any class derived from <see cref="T:W.Ind.Core.Dto.ILoginRequest"/></typeparam>
            <typeparam name="TLoginResponse">A concrete <see langword="type"/> derived from <see cref="T:W.Ind.Core.Dto.ILoginResponse"/></typeparam>
            <param name="dto">A concrete <see langword="type"/> instance that matches <typeparamref name="TLoginRequest"/></param>
            <returns>A concrete <see langword="type"/> instance that matches <typeparamref name="TLoginResponse"/></returns>
            <exception cref="T:System.ArgumentNullException">Thrown when UserName or Password is <see langword="null"/> or empty</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown when the <see cref="F:W.Ind.Core.Service.UserServiceBase`2._userManager"/> has already been disposed</exception>
            <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">Thrown when the user has been locked out</exception>
        </member>
        <member name="M:W.Ind.Core.Service.UserServiceBase`2.ValidatePasswordAsync``2(`0,``0)">
            <summary>
            Validates if the password is valid for the given user
            </summary>
            <typeparam name="TLoginRequest">Any concrete <see langword="type"/> derived from <see cref="T:W.Ind.Core.Dto.ILoginRequest"/></typeparam>
            <typeparam name="TLoginResponse">Any concrete <see langword="type"/> derived from <see cref="T:W.Ind.Core.Dto.ILoginResponse"/></typeparam>
            <param name="user">An instance of <typeparamref name="TUser"/></param>
            <param name="dto">A concrete <see langword="type"/> instance of <typeparamref name="TLoginRequest"/></param>
            <returns>A concrete <see langword="type"/> instance that matches <typeparamref name="TLoginResponse"/></returns>
            <exception cref="T:System.ObjectDisposedException">Thrown when the <see cref="F:W.Ind.Core.Service.UserServiceBase`2._userManager"/> has already been disposed</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="user"/> is <see langword="null"/></exception>
        </member>
        <member name="T:W.Ind.Core.Service.IJwtInvalidator">
            <summary>
            Base <see langword="interface"/> implemented by the <see cref="T:W.Ind.Core.Service.JwtInvalidator"/>
            </summary>
            <remarks>
            Used to invalidate unexpired JSON Web Tokens
            </remarks>
        </member>
        <member name="M:W.Ind.Core.Service.IJwtInvalidator.InvalidateToken(System.String,System.TimeSpan)">
            <summary>
            Marks an unexpired JSON Web <paramref name="token"/> as invalid
            </summary>
            <param name="token"><see langword="string"/> JSON Web Token to invalidate</param>
            <param name="expiry">
            <para>How long the token will be marked invalid</para>
            <para>The time it will take until the <paramref name="token"/> naturally expires</para>
            </param>
            <returns>Treat as <see langword="void"/></returns>
        </member>
        <member name="M:W.Ind.Core.Service.IJwtInvalidator.IsTokenInvalid(System.String)">
            <summary>
            Determines if the <paramref name="token"/> has already been invalidated
            </summary>
            <param name="token"><see langword="string"/> JSON Web Token</param>
            <returns><see langword="true"/> if the <paramref name="token"/> is invalid</returns>
        </member>
        <member name="T:W.Ind.Core.Service.IJwtService`2">
            <summary>
            An injectible (scoped) service to handle JWT-related functions
            </summary>
            <remarks>
            <para>Ideally for unauthenticated controller routes (such as 'Login')</para>
            </remarks>
            <typeparam name="TUser">
            <para>The CLR <see langword="type"/> corresponding to your User entity/table</para> 
            <para>Ensure this <see langword="type"/> derives from <see cref="T:W.Ind.Core.Entity.UserBase`1"/></para>
            </typeparam>
            <typeparam name="TKey">
            The data type of <typeparamref name="TUser"/>'s Primary Key
            </typeparam>
        </member>
        <member name="M:W.Ind.Core.Service.IJwtService`2.GenerateToken``1(`0,System.Boolean)">
            <summary>
            Generates a JSON Web Token for the given <typeparamref name="TUser"/>
            </summary>
            <remarks>
            <para>Expiration options being either 30 minutes or 30 days from <see cref="P:System.DateTime.UtcNow"/></para>
            <para>Use for login requests</para>
            </remarks>
            <typeparam name="TLoginResponse">The return type (any derived instance of <see cref="T:W.Ind.Core.Dto.ILoginResponse"/>)</typeparam>
            <param name="user">
            <para>An instance of the CLR <see langword="type"/> corresponding to your User entity/table</para> 
            <para>Ensure this <see langword="type"/> derives from <see cref="T:W.Ind.Core.Entity.UserBase`1"/></para>
            </param>
            <param name="rememberMe">
            <para>If <see langword="true"/>, token expires in 30 days</para>
            <para>If <see langword="false"/>, token expires in 30 minutes</para>
            </param>
            <returns>A derived instance of <see cref="T:W.Ind.Core.Dto.ILoginResponse"/></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the generated <see cref="T:System.IdentityModel.Tokens.Jwt.JwtSecurityToken"/> is <see langword="null"/></exception>
            <exception cref="T:System.ArgumentException">Thrown if the generated token is not of type <see cref="T:System.IdentityModel.Tokens.Jwt.JwtSecurityToken"/></exception>
            <exception cref="T:Microsoft.IdentityModel.Tokens.SecurityTokenEncryptionFailedException">Thrown if encryption ever fails</exception>
        </member>
        <member name="M:W.Ind.Core.Service.IJwtService`2.InvalidateToken(System.String)">
            <summary>
            Invalidates <paramref name="token"/>
            </summary>
            <param name="token"><see langword="string"/> JSON Web Token value</param>
            <exception cref="T:System.InvalidOperationException">Thrown when <paramref name="token"/> is unreadable</exception>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="token" /> is too long</exception>
        </member>
        <member name="M:W.Ind.Core.Service.IJwtService`2.IsTokenInvalid(System.String)">
            <summary>
            Checks if <paramref name="token"/> is invalid
            </summary>
            <param name="token"><see langword="string"/> JSON Web Token value</param>
            <returns>
            <para><see langword="true"/>, if <paramref name="token"/> is invalid</para>
            <para><see langword="false"/>, if <paramref name="token"/> is valid</para>
            </returns>
        </member>
        <member name="T:W.Ind.Core.Service.IUserService`2">
            <summary>
            A derived <see langword="interface"/> for an injectable (Scoped) Service
            </summary>
            <remarks>
            <para>Handles <see cref="T:Microsoft.AspNetCore.Identity.UserManager`1"/> related tasks</para>
            <para>Derive from this <see langword="interface"/> to add more functionality via interface injection</para>
            </remarks>
            <typeparam name="TUser">
            <para>
            The CLR type corresponding to your User entity type
            </para>
            <para>Ensure this inherits from <see cref="T:W.Ind.Core.Entity.UserBase`1"/></para>
            </typeparam>
            <typeparam name="TKey">
            The data type of <typeparamref name="TUser"/>'s Primary Key
            </typeparam>
        </member>
        <member name="M:W.Ind.Core.Service.IUserService`2.GetCurrent">
            <summary>
            Gets the ID of the current user making this request
            </summary>
            <remarks>
            <para>Defaults to a pre-defined System user when the JSON Web Token is missing or invalid</para>
            </remarks>
            <returns>A User ID</returns>
            <exception cref="T:System.ObjectDisposedException">Thrown when <see cref="T:Microsoft.AspNetCore.Identity.UserManager`1"/> instance has already been disposed</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when <see cref="M:W.Ind.Core.Service.IUserService`2.GetSystem(System.String)"/> fails</exception>
        </member>
        <member name="M:W.Ind.Core.Service.IUserService`2.GetSystem(System.String)">
            <summary>
            Gets the ID of a pre-defined System user for unauthenticated requests
            </summary>
            <remarks>
            Useful for setting the <see cref="P:W.Ind.Core.Entity.IAuditable.CreatedById"/> property on any auditable entity that can be created anonymously
            </remarks>
            <param name="systemUserName">The UserName of the System user</param>
            <returns>System User's ID</returns>
            <exception cref="T:System.ObjectDisposedException">Thrown when <see cref="T:Microsoft.AspNetCore.Identity.UserManager`1"/> instance has already been disposed</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="systemUserName"/> is <see langword="null"/> or empty when invoking <c>_userManager.FindByNameAsync</c></exception>
        </member>
        <member name="T:W.Ind.Core.Service.IUserServiceBase`2">
            <summary>
            Base <see langword="interface"/> implemented by <see langword="abstract"/> <see langword="class"/> <see cref="T:W.Ind.Core.Service.UserServiceBase`2"/>
            </summary>
            <typeparam name="TUser">
            <para>The CLR <see langword="type"/> corresponding to your User entity/table</para> 
            <para>Ensure this <see langword="type"/> derives from <see cref="T:W.Ind.Core.Entity.UserBase`1"/></para>
            </typeparam>
            <typeparam name="TKey">
            The data type of <typeparamref name="TUser"/>'s Primary Key
            </typeparam>
        </member>
        <member name="M:W.Ind.Core.Service.IUserServiceBase`2.EnsureUniqueEmailAsync(System.String)">
            <summary>
            An <see langword="async"/> method to validate if <paramref name="email"/> is unique to the system
            </summary>
            <remarks>
            Will <see langword="throw"/> <see cref="T:System.ComponentModel.DataAnnotations.ValidationException"/> or <see cref="T:System.ArgumentNullException"/> on fail
            </remarks>
            <param name="email">The email value to validate</param>
            <returns>Treat as <see langword="void"/></returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="email"/> is <see langword="null"/></exception>
            <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">Thrown when <paramref name="email"/> is in use</exception>
        </member>
        <member name="M:W.Ind.Core.Service.IUserServiceBase`2.EnsureUniqueNameAsync(System.String)">
            <summary>
            An <see langword="async"/> method to validate if <paramref name="name"/> is unique to the system
            </summary>
            <remarks>
            Will <see langword="throw"/> <see cref="T:System.ComponentModel.DataAnnotations.ValidationException"/> on fail
            </remarks>
            <param name="name">The UserName value to validate</param>
            <returns>Treat as <see langword="void"/></returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="name"/> is <see langword="null"/></exception>
            <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">Thrown when <paramref name="name"/> is in use</exception>
        </member>
        <member name="M:W.Ind.Core.Service.IUserServiceBase`2.RegisterAsync``1(``0)">
            <summary>
            An <see langword="async"/> method that adds a new <typeparamref name="TUser"/> to the System
            </summary>
            <typeparam name="TUserRegistration">
            <para>Any concrete <see langword="class"/> derived from <see cref="T:W.Ind.Core.Dto.IUserRegistration"/> to use as the <paramref name="dto"/> parameter</para>
            </typeparam>
            <param name="dto">
            <para>An instance of any concrete <see langword="class"/> derived from <see cref="T:W.Ind.Core.Dto.IUserRegistration"/></para>
            <para>Matches generic type <typeparamref name="TUserRegistration"/></para>
            </param>
            <returns>An insance of <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult"/> from the <see cref="M:Microsoft.AspNetCore.Identity.UserManager`1.CreateAsync(`0,System.String)"/> method</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when either the Email or Password is <see langword="null"/></exception>
            <exception cref="T:System.ObjectDisposedException">Thrown when <see cref="T:Microsoft.AspNetCore.Identity.UserManager`1"/> instance has already been disposed</exception>
            <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">Thrown when either the Email or UserName is taken</exception>
        </member>
        <member name="M:W.Ind.Core.Service.IUserServiceBase`2.ValidateLoginAsync``2(``0)">
            <summary>
            An <see langword="async"/> method that validates a <typeparamref name="TLoginRequest"/>
            </summary>
            <remarks>
            Will check the number of consecutive failed login attempts and lockout the user after the 7th failed attempt
            </remarks>
            <typeparam name="TLoginRequest">Any class derived from <see cref="T:W.Ind.Core.Dto.ILoginRequest"/></typeparam>
            <typeparam name="TLoginResponse">A concrete <see langword="type"/> derived from <see cref="T:W.Ind.Core.Dto.ILoginResponse"/></typeparam>
            <param name="dto">A concrete <see langword="type"/> instance that matches <typeparamref name="TLoginRequest"/></param>
            <returns>A concrete <see langword="type"/> instance that matches <typeparamref name="TLoginResponse"/></returns>
            <exception cref="T:System.ArgumentNullException">Thrown when UserName or Password is <see langword="null"/> or empty</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown when <see cref="T:Microsoft.AspNetCore.Identity.UserManager`1"/> instance has already been disposed</exception>
            <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">Thrown when the user has been locked out</exception>
        </member>
        <member name="T:W.Ind.Core.Service.JwtService`2">
            <summary>
            An injectible (scoped) service to handle JWT-related functions
            </summary>
            <remarks>
            <para>Ideally for unauthenticated controller routes (such as 'Login')</para>
            </remarks>
            <typeparam name="TUser">
            <para>The CLR <see langword="type"/> corresponding to your User entity/table</para> 
            <para>Ensure this <see langword="type"/> derives from <see cref="T:W.Ind.Core.Entity.UserBase`1"/></para>
            </typeparam>
            <typeparam name="TKey">
            The data type of <typeparamref name="TUser"/>'s Primary Key
            </typeparam>
        </member>
        <member name="F:W.Ind.Core.Service.JwtService`2._jwtInvalidator">
            <summary>
            A <see langword="protected"/> field containing the service reference for <see cref="T:W.Ind.Core.Service.IJwtInvalidator"/> (singleton)
            </summary>
        </member>
        <member name="M:W.Ind.Core.Service.JwtService`2.#ctor(W.Ind.Core.Config.JwtConfig,W.Ind.Core.Service.IJwtInvalidator)">
            <summary>
            Constructor
            </summary>
            <remarks>
            Injected instance of <see cref="T:W.Ind.Core.Config.JwtConfig"/> <paramref name="config"/> is passed along to the <see langword="abstract"/> parent <see href="JwtServiceBase"/>'s constructor
            </remarks>
            <param name="config">Preferably injected config options</param>
            <param name="jwtInvalidator">Preferably injected singleton service</param>
        </member>
        <member name="M:W.Ind.Core.Service.JwtService`2.GenerateToken``1(`0,System.Boolean)">
            <summary>
            Generates a JSON Web Token for the given <typeparamref name="TUser"/>
            </summary>
            <remarks>
            <para>Expiration options being either 30 minutes or 30 days from <see cref="P:System.DateTime.UtcNow"/></para>
            <para>Use for login requests</para>
            </remarks>
            <typeparam name="TLoginResponse">The return type (any derived instance of <see cref="T:W.Ind.Core.Dto.ILoginResponse"/>)</typeparam>
            <param name="user">
            <para>An instance of the CLR <see langword="type"/> corresponding to your User entity/table</para> 
            <para>Ensure this <see langword="type"/> derives from <see cref="T:W.Ind.Core.Entity.UserBase`1"/></para>
            </param>
            <param name="rememberMe">If true, token expiration set for 30 days from now. Otherwise it defaults to 30 minutes.</param>
            <returns>A derived instance of <see cref="T:W.Ind.Core.Dto.ILoginResponse"/></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the generated <see cref="T:System.IdentityModel.Tokens.Jwt.JwtSecurityToken"/> is <see langword="null"/></exception>
            <exception cref="T:System.ArgumentException">Thrown if the generated token is not of type <see cref="T:System.IdentityModel.Tokens.Jwt.JwtSecurityToken"/></exception>
            <exception cref="T:Microsoft.IdentityModel.Tokens.SecurityTokenEncryptionFailedException">Thrown if encryption fails for any reason</exception>
        </member>
        <member name="M:W.Ind.Core.Service.JwtService`2.InvalidateToken(System.String)">
            <summary>
            Uses instance of <see cref="T:W.Ind.Core.Service.IJwtInvalidator"/> singleton service to invalidate <paramref name="token"/>
            </summary>
            <param name="token"><see langword="string"/>? JSON Web Token value</param>
            <exception cref="T:System.InvalidOperationException">Thrown when <paramref name="token"/> is unreadable</exception>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="token" /> is too long</exception>
        </member>
        <member name="M:W.Ind.Core.Service.JwtService`2.IsTokenInvalid(System.String)">
            <summary>
            Uses instance of <see cref="T:W.Ind.Core.Service.IJwtInvalidator"/> singleton service to check if <paramref name="token"/> is invalid
            </summary>
            <param name="token"><see langword="string"/>? JSON Web Token value</param>
            <returns>
            <para><see langword="true"/>, if <paramref name="token"/> is invalid</para>
            <para><see langword="false"/>, if <paramref name="token"/> is valid</para>
            </returns>
        </member>
        <member name="T:W.Ind.Core.Service.UserService`2">
            <summary>
            A <see langword="class"/> derived from <see cref="T:W.Ind.Core.Service.UserServiceBase`2"/> and <see cref="T:W.Ind.Core.Service.IUserService`2"/> 
            </summary>
            <remarks>
            Handles <see cref="T:Microsoft.AspNetCore.Identity.UserManager`1"/> related tasks using <see cref="N:Microsoft.AspNetCore.Identity"/>
            </remarks>
            <typeparam name="TUser">
            <para>The CLR <see langword="type"/> corresponding to your User entity/table</para> 
            <para>Ensure this <see langword="type"/> derives from <see cref="T:W.Ind.Core.Entity.UserBase`1"/></para>
            </typeparam>
            <typeparam name="TKey">
            The data type of <typeparamref name="TUser"/>'s Primary Key
            </typeparam>
        </member>
        <member name="F:W.Ind.Core.Service.UserService`2._contextAccessor">
            <summary>
            <see langword="protected"/> <see langword="readonly"/> field used to access <see cref="T:Microsoft.AspNetCore.Http.HttpContext"/> within derived classes
            </summary>
            <remarks>
            Used to get the authentication token from HTTP "Authorization" Header
            </remarks>
        </member>
        <member name="M:W.Ind.Core.Service.UserService`2.#ctor(Microsoft.AspNetCore.Identity.UserManager{`0},Microsoft.AspNetCore.Identity.SignInManager{`0},W.Ind.Core.Service.IJwtService{`0,`1},Microsoft.AspNetCore.Http.IHttpContextAccessor)">
            <summary>
            Constructor
            </summary>
            <remarks>
            <para>Injects <paramref name="userManager"/> and <paramref name="jwtService"/> to pass along to base constructor</para>
            <para>Injects <paramref name="contextAccessor"/> to set on this class</para>
            </remarks>
            <param name="userManager">
            <para><see cref="T:Microsoft.AspNetCore.Identity.UserManager`1"/> instance</para> 
            <para><typeparamref name="TUser"/> being the same <see langword="type"/> as <see cref="T:W.Ind.Core.Service.UserService`2"/></para>
            </param>
            <param name="signInManager">
            <para>Inject while configuring services in your <c>Program.cs</c> or <c>Startup.cs</c> file:</para>
            <example>
            <code>
            <see langword="using"/> <see cref="N:Microsoft.Extensions.DependencyInjection"/>;
            
            builder.Services.AddIdentity&lt;<see cref="T:W.Ind.Core.Entity.User"/>, <see cref="T:W.Ind.Core.Entity.Role"/>&gt;(...);
            </code>
            </example>
            </param>
            <param name="jwtService">
            <para><see cref="T:W.Ind.Core.Service.IJwtService`2"/> instance</para>
            <para><typeparamref name="TUser"/> being the same <see langword="type"/> as <see cref="T:W.Ind.Core.Service.UserService`2"/></para>
            </param>
            <param name="contextAccessor">
            <para><see cref="T:Microsoft.AspNetCore.Http.IHttpContextAccessor"/> instance</para>
            </param>
        </member>
        <member name="M:W.Ind.Core.Service.UserService`2.GetCurrent">
            <summary>
            Gets the ID of the current user making this request
            </summary>
            <remarks>
            <para>Utilizes <see cref="F:W.Ind.Core.Service.UserService`2._contextAccessor"/> to retrive the JWT claim for the current user's ID</para>
            <para>Defaults to a pre-defined System user when the JSON Web Token is missing or invalid</para>
            </remarks>
            <returns>A User ID</returns>
            <exception cref="T:System.ObjectDisposedException">Thrown when <see cref="T:Microsoft.AspNetCore.Identity.UserManager`1"/> instance has already been disposed</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when GetSystem() fails</exception>
        </member>
        <member name="M:W.Ind.Core.Service.UserService`2.GetSystem(System.String)">
            <summary>
            Gets the ID of a pre-defined System user for unauthenticated requests
            </summary>
            <remarks>
            Useful for setting the <see cref="P:W.Ind.Core.Entity.IAuditable.CreatedById"/> property on any auditable entity that can be created anonymously
            </remarks>
            <param name="systemUserName">The UserName of the System user</param>
            <returns>System User's ID</returns>
            <exception cref="T:System.ObjectDisposedException">Thrown when <see cref="T:Microsoft.AspNetCore.Identity.UserManager`1"/> instance has already been disposed</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="systemUserName"/> is <see langword="null"/> or empty when invoking <c>_userManager.FindByNameAsync</c></exception>
        </member>
        <member name="T:W.Ind.Core.Service.JwtInvalidator">
            <summary>
            A derived Hosted Service class to be injected into custom Middleware.
            </summary>
            <remarks>
            Inject this as a Hosted Service, and not a Scoped Service.
            </remarks>
        </member>
        <member name="F:W.Ind.Core.Service.JwtInvalidator._invalidTokens">
            <summary>
            Stores invalid tokens in-memory until they expire.
            </summary>
            <value>
            <para>The Key will contain a JSON Web Token <see cref="T:System.String"/>.</para>
            <para>The Value is a <see cref="T:System.DateTime"/> representing when this token can be removed.</para>
            </value>
        </member>
        <member name="F:W.Ind.Core.Service.JwtInvalidator._cleanupTimer">
            <summary>
            <see cref="T:System.Threading.Timer"/> instance used to check on invalid tokens
            </summary>
        </member>
        <member name="M:W.Ind.Core.Service.JwtInvalidator.#ctor">
            <summary>
            Default Constructor
            </summary>
            <remarks>
            Starts a <see cref="T:System.Threading.Timer"/> with the callback removing expired tokens from <see cref="F:W.Ind.Core.Service.JwtInvalidator._invalidTokens"/>
            </remarks>
        </member>
        <member name="M:W.Ind.Core.Service.JwtInvalidator.Dispose">
            <summary>
            Derived from <see cref="T:System.IDisposable"/>
            </summary>
            <remarks>
            <para>
            Sets <see href="_cleanupTimer"/> interval to <see cref="F:System.Threading.Timeout.Infinite"/> before disposing
            </para>
            <para>
            Calls <see cref="M:System.GC.SuppressFinalize(System.Object)"/> so further abstraction is still an option
            </para>
            </remarks>
        </member>
        <member name="M:W.Ind.Core.Service.JwtInvalidator.InvalidateToken(System.String,System.TimeSpan)">
            <summary>
            Marks an unexpired JSON Web <paramref name="token"/> as invalid
            </summary>
            <remarks>
            Attempts to add <paramref name="token"/> param to the <see cref="F:W.Ind.Core.Service.JwtInvalidator._invalidTokens"/> property with (<see cref="P:System.DateTime.UtcNow"/> + <paramref name="expiry"/> param) as the value
            </remarks>
            <param name="token"><see langword="string"/> JSON Web Token to invalidate</param>
            <param name="expiry">
            <para>How long the <paramref name="token"/> will be marked invalid</para>
            <para>Time it takes until the <paramref name="token"/> naturally expires</para>
            </param>
            <returns>Treat as <see langword="void"/></returns>
        </member>
        <member name="M:W.Ind.Core.Service.JwtInvalidator.IsTokenInvalid(System.String)">
            <summary>
            Determines if the <paramref name="token"/> has already been invalidated
            </summary>
            <remarks>
            Simply checks if <see cref="F:W.Ind.Core.Service.JwtInvalidator._invalidTokens"/> already contains a key for the <paramref name="token"/> param
            </remarks>
            <param name="token"><see langword="string"/> JSON Web Token</param>
            <returns><see langword="true"/> if the <paramref name="token"/> is invalid</returns>
        </member>
        <member name="M:W.Ind.Core.Service.JwtInvalidator.CleanupExpiredTokens(System.Object)">
            <summary>
            A callback method to remove expired tokens from <see cref="F:W.Ind.Core.Service.JwtInvalidator._invalidTokens"/>
            </summary>
            <remarks>
            <para>
            Invoked by <see cref="F:W.Ind.Core.Service.JwtInvalidator._cleanupTimer"/>
            </para>
            <para>Removes entries where the value is &lt;= <see cref="P:System.DateTime.UtcNow"/></para>
            </remarks>
            <param name="state">The arg passed into the callback. Unused in this scenario.</param>
        </member>
        <member name="M:W.Ind.Core.Service.JwtInvalidator.GetCacheKey(System.String)">
            <summary>
            Gets the interpolated Key value used to store an invalid <paramref name="token"/>
            </summary>
            <param name="token">JSON Web Token <see langword="string"/></param>
            <returns>The corresponding key (<see langword="string"/>) for an invalid token</returns>
        </member>
    </members>
</doc>
